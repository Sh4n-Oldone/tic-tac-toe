{"version":3,"sources":["utils/objectSlices.js","components/Cell/Cell.js","components/FinalWindow/FinalWindow.js","components/App/App.js","utils/isThereEmptyValue.js","index.js"],"names":["getRow","obj","firstPosition","secondPosition","Object","keys","slice","reduce","result","key","getColumn","num","newArr","forEach","item","length","toString","push","getMoreItems","arr","k","getValuesString","values","replaceAll","Cell","position","isPlayerCross","handleClick","newGame","useState","isEnabled","setIsEnabled","cellStatus","setCellStatus","useEffect","className","onClick","FinalWindow","isFinished","whoWon","onRestart","App","setIsPlayerCross","setNewGame","cells","defaultCellsState","cellsStatus","setCellsStatus","setIsFinished","setWhoWon","handleCellClick","cellPosition","prevStatus","winningStatus","arrayOfWinCombinations","includes","isEmptyValue","map","v","isThereEmptyValue","cell","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7631f223.chunk.js","sourcesContent":["export const getRow = (obj, firstPosition, secondPosition) => \r\n  Object.keys(obj).slice(firstPosition, secondPosition).reduce((result, key) => {\r\n    result[key] = obj[key];\r\n    return result;\r\n  }, {})\r\n\r\nexport const getColumn = (obj, num) => {\r\n  let newArr = []\r\n\r\n  Object.keys(obj).forEach(item => {\r\n    if (item.slice(item.length - 1) === num.toString()) {\r\n      newArr.push(item)\r\n    }\r\n  })\r\n\r\n  return newArr.reduce((result, key) => {\r\n    result[key] = obj[key]\r\n    return result\r\n  }, {})\r\n}\r\n\r\nexport const getMoreItems = (obj, arr) => {\r\n  let newArr = []\r\n\r\n  arr.forEach(item => {\r\n    Object.keys(obj).forEach(k => {\r\n      if (k === item) { newArr.push(k) }\r\n    })\r\n  })\r\n\r\n  return newArr.reduce((result, key) => {\r\n    result[key] = obj[key]\r\n    return result\r\n  }, {})\r\n}\r\n\r\nexport const getValuesString = (obj) => Object.values(obj).toString().replaceAll(',', '')","import React, { useEffect, useState } from 'react'\r\nimport './Cell.css'\r\n\r\nexport default function Cell({position, isPlayerCross, handleClick, newGame}) {\r\n\r\n  const [isEnabled, setIsEnabled] = useState(true)\r\n  const [cellStatus, setCellStatus] = useState('')\r\n  const handleCellClick = () => {\r\n    setIsEnabled(false)\r\n    handleClick(position, isPlayerCross ? 'cross' : 'zero')\r\n    if(isPlayerCross) {\r\n      setCellStatus('cross')\r\n    } else {\r\n      setCellStatus('zero')\r\n    }\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    if (newGame) {\r\n      setIsEnabled(true)\r\n      setCellStatus('')\r\n    }\r\n  }, [newGame])\r\n\r\n  return (\r\n    <div \r\n      className={`cell${isPlayerCross && isEnabled\r\n        ? ' x_hover' \r\n        : isEnabled\r\n          ? ' zero_hover'\r\n          : ''\r\n      }${cellStatus === 'cross' \r\n          ? ' cell-x' \r\n          : cellStatus === 'zero' \r\n            ? ' cell-zero' \r\n            : ''\r\n        }${isEnabled \r\n          ? '' \r\n          : ' cell_disabled'}`}\r\n      onClick={handleCellClick}\r\n    />\r\n  )\r\n}\r\n","import React from 'react'\r\nimport './FinalWindow.css'\r\n\r\nexport default function FinalWindow({isFinished, whoWon, onRestart}) {\r\n\r\n  return (\r\n    <div className={`final-window${isFinished ? '' : 'final-window_hidden'}`}>\r\n      <p className={`final-window__text${isFinished ? '' : ' final-window__text_hidden'}`}>\r\n        {whoWon === 'cross' \r\n          ? 'Крестики победили!' \r\n          : whoWon === 'zero' \r\n            ? 'Нолики победили!'\r\n            : 'Ничья!'\r\n        }\r\n      </p>\r\n      <button \r\n        className={`final-window__restart-button${isFinished ? '' : ' final-window__restart-button_hidden'}`}\r\n        onClick={onRestart}\r\n      >\r\n        Снова!\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { getRow, getColumn, getMoreItems, getValuesString } from '../../utils/objectSlices'\r\nimport { isThereEmptyValue } from '../../utils/isThereEmptyValue'\r\nimport Cell from '../Cell/Cell'\r\nimport FinalWindow from '../FinalWindow/FinalWindow'\r\nimport './App.css'\r\n\r\nexport default function App() {\r\n  const [isPlayerCross, setIsPlayerCross] = useState(true)\r\n  const [newGame, setNewGame] = useState(false)\r\n\r\n  const cells = [ 'a1', 'a2', 'a3', 'b1', 'b2', 'b3', 'c1', 'c2', 'c3']\r\n  const defaultCellsState = cells.reduce((obj, item) => (obj[item]='', obj),{})\r\n  const [cellsStatus, setCellsStatus] = useState(defaultCellsState)\r\n\r\n  const [isFinished, setIsFinished] = useState(false)\r\n  const [whoWon, setWhoWon] = useState('')\r\n\r\n  const handleCellClick = (cellPosition, cellStatus) => {\r\n    setIsPlayerCross(!isPlayerCross)\r\n    setCellsStatus(prevStatus => ({\r\n      ...prevStatus,\r\n      [cellPosition]: cellStatus\r\n    }))\r\n    setNewGame(false)\r\n  }\r\n\r\n  const winningStatus = () => {\r\n    const arrayOfWinCombinations = [\r\n      getValuesString(getRow(cellsStatus, 0, 3)),\r\n      getValuesString(getRow(cellsStatus, 3, 6)),\r\n      getValuesString(getRow(cellsStatus, 6, 9)),\r\n\r\n      getValuesString(getColumn(cellsStatus, 1)),\r\n      getValuesString(getColumn(cellsStatus, 2)),\r\n      getValuesString(getColumn(cellsStatus, 3)),\r\n\r\n      getValuesString(getMoreItems(cellsStatus, ['a1', 'b2', 'c3'])),\r\n      getValuesString(getMoreItems(cellsStatus, ['a3', 'b2', 'c1']))\r\n    ]\r\n\r\n    if (arrayOfWinCombinations.includes('crosscrosscross')) {\r\n      setWhoWon('cross')\r\n      setIsFinished(true)\r\n    }\r\n    if (arrayOfWinCombinations.includes('zerozerozero')) {\r\n      setWhoWon('zero')\r\n      setIsFinished(true)\r\n    }\r\n    if (\r\n        !isThereEmptyValue(cellsStatus) && \r\n        !arrayOfWinCombinations.includes('crosscrosscross') && \r\n        !arrayOfWinCombinations.includes('zerozerozero')\r\n        ) \r\n      {\r\n        setWhoWon('draw')\r\n        setIsFinished(true)\r\n    }\r\n  }\r\n\r\n  const handleRestart = () => {\r\n    setWhoWon('')\r\n    setIsFinished(false)\r\n    setCellsStatus({ ...defaultCellsState })\r\n    setIsPlayerCross(true)\r\n    setNewGame(true)\r\n  }\r\n\r\n  useEffect(() => {\r\n    winningStatus()\r\n  }, [cellsStatus])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className='board'>\r\n\r\n        {cells.map( cell => \r\n            <Cell \r\n              key={cell.toString()}\r\n              position={cell} \r\n              handleClick={handleCellClick} \r\n              isPlayerCross={isPlayerCross}\r\n              newGame={newGame}\r\n            />\r\n          )}\r\n\r\n      </div>\r\n      \r\n      <FinalWindow \r\n        onRestart={handleRestart}\r\n        isFinished={isFinished}\r\n        whoWon={whoWon}\r\n      />\r\n\r\n    </div>\r\n  )\r\n}\r\n","export const isThereEmptyValue = (obj) => {\r\n  let isEmptyValue = false\r\n\r\n  Object.values(obj).map(v => !v ? isEmptyValue = true : '')\r\n\r\n  return isEmptyValue\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}